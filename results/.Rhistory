}
df_weak_gpu <- data.frame(read.csv("weak_scaling_gpu.csv"))
#times
plot_times(df_weak_gpu)
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
#times
plot_times(df_weak_gpu)
#times
plot_times(df_strong_gpu)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads*ime_taken), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads*time_taken), color="1 procs", group = 1))  +
# geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group=1)) +
# geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group = 1))  +
#
# geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group=1)) +
# geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group = 1))  +
#
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group = 1))  +
#
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads*time_taken, color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads*time_taken, color="1 procs", group = 1))  +
# geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group=1)) +
# geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group = 1))  +
#
# geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group=1)) +
# geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group = 1))  +
#
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group = 1))  +
#
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + 0.18(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + 0.18(1-n_threads), color="1 procs", group = 1))  +
# geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group=1)) +
# geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group = 1))  +
#
# geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group=1)) +
# geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group = 1))  +
#
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group = 1))  +
#
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
df_weak_gpu <- data.frame(read.csv("weak_scaling_gpu.csv"))
#times
plot_times(df_weak_gpu)
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_speedup <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y =  df[1,]$time_taken/time_taken, color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y =  df[1,]$time_taken/time_taken, color="1 procs", group = 1))  +
geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken/time_taken, color="2 procs", group=1)) +
geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken/time_taken, color="2 procs", group = 1))  +
geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken/time_taken, color="4 procs", group=1)) +
geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken/time_taken, color="4 procs", group = 1))  +
geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken/time_taken, color="8 procs", group=1)) +
geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken/time_taken, color="8 procs", group = 1))  +
geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken/time_taken, color="16 procs", group=1)) +
geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken/time_taken, color="16 procs", group = 1))  +
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + 0.18(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + 0.18(1-n_threads), color="1 procs", group = 1))  +
# geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group=1)) +
# geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group = 1))  +
#
# geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group=1)) +
# geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group = 1))  +
#
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group = 1))  +
#
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + 0.18*(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + 0.18*(1-n_threads), color="1 procs", group = 1))  +
# geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group=1)) +
# geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group = 1))  +
#
# geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group=1)) +
# geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group = 1))  +
#
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group = 1))  +
#
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
df_weak_gpu <- data.frame(read.csv("weak_scaling_gpu.csv"))
#times
plot_times(df_weak_gpu)
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + (0.018*problem_size*10^(-6))*(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + (0.018*problem_size*10^(-6))*(1-n_threads), color="1 procs", group = 1))  +
# geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group=1)) +
# geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken*n_threads/time_taken, color="2 procs", group = 1))  +
#
# geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group=1)) +
# geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken*n_threads/time_taken, color="4 procs", group = 1))  +
#
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken*n_threads/time_taken, color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken*n_threads/time_taken, color="16 procs", group = 1))  +
#
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + (0.018*problem_size*10^(-6))*(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + (0.018*problem_size*10^(-6))*(1-n_threads), color="1 procs", group = 1))  +
geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + (0.018*problem_size*10^(-6))*(1-2*n_threads), color="2 procs", group=1)) +
geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + (0.018*problem_size*10^(-6))*(1-2*n_threads), color="2 procs", group = 1))  +
geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + (0.018*problem_size*10^(-6))*(1-4*n_threads), color="4 procs", group=1)) +
geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + (0.018*problem_size*10^(-6))*(1-4*n_threads), color="4 procs", group = 1))  +
geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group=1)) +
geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group = 1))  +
geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group=1)) +
geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group = 1))  +
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_efficiency <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = ts/(1*n_threads*time_taken), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = ts/(1*n_threads*time_taken), color="1 procs", group = 1))  +
geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken/(2*n_threads*time_taken), color="2 procs", group=1)) +
geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken/(2*n_threads*time_taken), color="2 procs", group = 1))  +
geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken/(4*n_threads*time_taken), color="4 procs", group=1)) +
geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken/(4*n_threads*time_taken), color="4 procs", group = 1))  +
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken/(8*n_threads*time_taken), color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken/(8*n_threads*time_taken), color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken/(16*n_threads*time_taken), color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken/(16*n_threads*time_taken), color="16 procs", group = 1))  +
#
#
labs(x = "num threads", y = "Efficiency") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_efficiency <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = ts/(1*n_threads*time_taken), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = ts/(1*n_threads*time_taken), color="1 procs", group = 1))  +
geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken/(2*n_threads*time_taken), color="2 procs", group=1)) +
geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = df_2_procs[1,]$time_taken/(2*n_threads*time_taken), color="2 procs", group = 1))  +
geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken/(4*n_threads*time_taken), color="4 procs", group=1)) +
geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = df_4_procs[1,]$time_taken/(4*n_threads*time_taken), color="4 procs", group = 1))  +
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken/(8*n_threads*time_taken), color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = df_8_procs[1,]$time_taken/(8*n_threads*time_taken), color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken/(16*n_threads*time_taken), color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = df_16_procs[1,]$time_taken/(16*n_threads*time_taken), color="16 procs", group = 1))  +
#
#
labs(x = "num threads", y = "Efficiency") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + (0.018*problem_size*10^(-6))*(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + (0.018*problem_size*10^(-6))*(1-n_threads), color="1 procs", group = 1))  +
geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + (0.018*problem_size*10^(-6))*(1-2*n_threads), color="2 procs", group=1)) +
geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + (0.018*problem_size*10^(-6))*(1-2*n_threads), color="2 procs", group = 1))  +
geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + (0.018*problem_size*10^(-6))*(1-4*n_threads), color="4 procs", group=1)) +
geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + (0.018*problem_size*10^(-6))*(1-4*n_threads), color="4 procs", group = 1))  +
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group = 1))  +
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
View(df)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
s <- (0.018*df$problem_size*10^(-6))
sp <- s/df$time_taken
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + sp*(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + sp*(1-n_threads), color="1 procs", group = 1))  +
# geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + (0.018*problem_size*10^(-6))*(1-2*n_threads), color="2 procs", group=1)) +
# geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + (0.018*problem_size*10^(-6))*(1-2*n_threads), color="2 procs", group = 1))  +
#
# geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + (0.018*problem_size*10^(-6))*(1-4*n_threads), color="4 procs", group=1)) +
# geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + (0.018*problem_size*10^(-6))*(1-4*n_threads), color="4 procs", group = 1))  +
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group = 1))  +
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
df_weak_gpu <- data.frame(read.csv("weak_scaling_gpu.csv"))
#times
plot_times(df_weak_gpu)
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
df <- df_weak_gpu
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
s <- (0.018*df$problem_size*10^(-6))
s <- (0.018*df$problem_size*10^(-6))
sp <- s/df$time_taken
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
s <- (0.018*df$problem_size*10^(-6))
sp <- s/df$time_taken
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + sp[1:30]*(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + sp[1:30]*(1-n_threads), color="1 procs", group = 1))  +
# geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + (0.018*problem_size*10^(-6))*(1-2*n_threads), color="2 procs", group=1)) +
# geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + (0.018*problem_size*10^(-6))*(1-2*n_threads), color="2 procs", group = 1))  +
#
# geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + (0.018*problem_size*10^(-6))*(1-4*n_threads), color="4 procs", group=1)) +
# geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + (0.018*problem_size*10^(-6))*(1-4*n_threads), color="4 procs", group = 1))  +
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group = 1))  +
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
s <- (0.018*df$problem_size*10^(-6))
sp <- s/df$time_taken
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + sp[1:30]*(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + sp[1:30]*(1-n_threads), color="1 procs", group = 1))  +
geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + sp[31:60]*(1-2*n_threads), color="2 procs", group=1)) +
geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + sp[31:60]*(1-2*n_threads), color="2 procs", group = 1))  +
geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + sp[61:90]*(1-4*n_threads), color="4 procs", group=1)) +
geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + sp[61:90]*(1-4*n_threads), color="4 procs", group = 1))  +
# geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group=1)) +
# geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + (0.018*problem_size*10^(-6))*(1-8*n_threads), color="8 procs", group = 1))  +
#
# geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group=1)) +
# geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + (0.018*problem_size*10^(-6))*(1-16*n_threads), color="16 procs", group = 1))  +
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
plot_speedup_weak <- function(df) {
df_1_procs <- df[which(df$n_procs == 1), ]
df_2_procs <- df[which(df$n_procs == 2), ]
df_4_procs <- df[which(df$n_procs == 4), ]
df_8_procs <- df[which(df$n_procs == 8), ]
df_16_procs <- df[which(df$n_procs == 16), ]
s <- (0.018*df$problem_size*10^(-6))
sp <- s/df$time_taken
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + sp[1:30]*(1-n_threads), color="1 procs", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = n_threads + sp[1:30]*(1-n_threads), color="1 procs", group = 1))  +
geom_line(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + sp[31:60]*(1-2*n_threads), color="2 procs", group=1)) +
geom_point(data = df_2_procs, aes(x = as.factor(n_threads), y = 2*n_threads + sp[31:60]*(1-2*n_threads), color="2 procs", group = 1))  +
geom_line(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + sp[61:90]*(1-4*n_threads), color="4 procs", group=1)) +
geom_point(data = df_4_procs, aes(x = as.factor(n_threads), y = 4*n_threads + sp[61:90]*(1-4*n_threads), color="4 procs", group = 1))  +
geom_line(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + sp[91:120]*(1-8*n_threads), color="8 procs", group=1)) +
geom_point(data = df_8_procs, aes(x = as.factor(n_threads), y = 8*n_threads + sp[91:120]*(1-8*n_threads), color="8 procs", group = 1))  +
geom_line(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + sp[121:150]*(1-16*n_threads), color="16 procs", group=1)) +
geom_point(data = df_16_procs, aes(x = as.factor(n_threads), y = 16*n_threads + sp[121:150]*(1-16*n_threads), color="16 procs", group = 1))  +
labs(x = "num threads", y = "Speedup") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("1 procs" = "#a6620f", "2 procs" = "#2bacbd", "4 procs" = "#cf5e25", "8 procs" = "#1b572c", "16 procs" = "#e1e809" )) +
labs(title = "")
}
#speedup -> Amdahl’s law
plot_speedup_weak(df_weak_gpu)
df_strong_cpu <- data.frame(read.csv("strong_scaling_cpu.csv"))
#times
plot_times(df_strong_cpu)
#speedup -> Amdahl’s law
plot_speedup(df_strong_cpu)
#efficiency
plot_efficiency(df_strong_cpu)
#Model
model(df_strong_cpu)
model <- function(df) {
#serial times
t_tree <- 0.64
t_ord <- ts - t_tree # ~ time to read the array * 3 * log(N)
# with N = 10^7 -> t_ord ~ 0.06 *3*log(10^7)
Ts_1 <- 0.06*3 # at least one sequential read
# then parallel time is parallelizable part divided by the numb of workers
# + sequential part + (Ts - Ts_1)/n_workers
df_1_procs <- df[which(df$n_procs == 1), ]
n <- nrow(df_1_procs)
tp <- rep(0,n)
for (i in 1:n){
tp[i] <- t_tree/i + Ts_1 + (t_ord - Ts_1)/i
}
ggplot() +
# theoretical
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = time_taken, color="empirical", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = time_taken, color="empirical", group = 1))  +
geom_line(data = df_1_procs, aes(x = as.factor(n_threads), y = tp, color="theoretical", group=1)) +
geom_point(data = df_1_procs, aes(x = as.factor(n_threads), y = tp, color="theoretical", group = 1))  +
labs(x = "num threads", y = "Time taken (s)") +
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("empirical" = "#a6620f", "theoretical" = "#2bacbd" )) +
labs(title = "")
}
#efficiency
plot_efficiency(df_strong_cpu)
#Model
model(df_strong_cpu)
#speedup -> Amdahl’s law
plot_speedup(df_strong_cpu)
df_weak_cpu <- data.frame(read.csv("weak_scaling_cpu.csv"))
#times
plot_times(df_weak_cpu)
df_weak_cpu <- data.frame(read.csv("weak_scaling_cpu.csv"))
#times
plot_times(df_weak_cpu)
View(df_weak_cpu)
df_weak_cpu <- data.frame(read.csv("weak_scaling_cpu.csv"))
View(df_weak_cpu)
df_weak_cpu <- data.frame(read.csv("weak_scaling_cpu.csv"))
#times
plot_times(df_weak_cpu)
#times
plot_times(df_strong_gpu)
#speedup -> Amdahl’s law
plot_speedup(df_strong_gpu)
#times
plot_times(df_strong_cpu)
#speedup -> Amdahl’s law
plot_speedup(df_strong_cpu)
#times
plot_times(df_strong_gpu)
#speedup -> Amdahl’s law
plot_speedup(df_strong_gpu)
#speedup -> Amdahl’s law
plot_speedup(df_strong_gpu)
